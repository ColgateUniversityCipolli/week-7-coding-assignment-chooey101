\documentclass{article}
\usepackage[margin=1.0in]{geometry} % To set margins
\usepackage{amsmath}  % This allows me to use the align functionality.
                      % If you find yourself trying to replicate
                      % something you found online, ensure you're
                      % loading the necessary packages!
\usepackage{amsfonts} % Math font
\usepackage{fancyvrb}
\usepackage{hyperref} % For including hyperlinks
\usepackage[shortlabels]{enumitem}% For enumerated lists with labels specified
                                  % We had to run tlmgr_install("enumitem") in R
\usepackage{float}    % For telling R where to put a table/figure
\usepackage{natbib}        %For the bibliography
\bibliographystyle{apalike}%For the bibliography

\begin{document}
  \begin{enumerate}
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Question 1
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \item Write a \texttt{pois.prob()} function that computes $P(X=x)$, 
    $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x).$ Enable the user to specify the rate parameter $\lambda$.
<<size="scriptsize">>=
suppressPackageStartupMessages(library(tidyverse))
pois_probabilities <- function(x, lambda, type = "<=") {
  prob <- case_when(
    type == "="  ~ dpois(x, lambda),  # P(X = x)
    type == "!=" ~ 1 - dpois(x, lambda),  # P(X \neq x)
    type == "<"  ~ ppois(x - 1, lambda),  # P(X < x)
    type == "<=" ~ ppois(x, lambda),  # P(X \leq x)
    type == ">"  ~ ppois(x, lambda, lower.tail = FALSE),  # P(X > x)
    type == ">=" ~ ppois(x - 1, lambda, lower.tail = FALSE)  # P(X \geq x)
  )
  return(tibble(Type = type, Probability = prob))
}
pois_probabilities(3, lambda = 5, type = ">=")
@
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Question 2
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    \item Write a \texttt{beta.prob()} function that computes $P(X=x)$, 
    $P(X \neq x)$, $P(X<x)$, $P(X \leq x)$, $P(X > x)$, and $P(X \geq x)$
    for a beta distribution. Enable the user to specify the shape parameters
    $\alpha$ and $\beta$.
<<size="scriptsize">>=
beta_probabilities <- function(x, alpha, beta, type = "<=") {
    prob <- case_when(
      type == "="  ~ 0,  #always = 0 for continuous distribution
      type == "!=" ~ 1, #always = 1 for continuous distribution
      type == "<"  ~ pbeta(x, alpha, beta),  # P(X < x)
      type == "<=" ~ pbeta(x, alpha, beta),  # P(X \leq x) (same for continuous)
      type == ">"  ~ pbeta(x, alpha, beta, lower.tail = FALSE),  # P(X > x)
      type == ">=" ~ pbeta(x, alpha, beta, lower.tail = FALSE)  # P(X \geq x)
    )
  
  return(tibble(Type = type, Probability = prob))
}

beta_probabilities(0.3, alpha = 2, beta = 5)
@
\end{enumerate}
\bibliography{bibliography}
\end{document}
